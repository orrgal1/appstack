/**
 * @fileoverview gRPC-Web generated client stub for main
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.19.1
// source: combined.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as google_protobuf_empty_pb from 'google-protobuf/google/protobuf/empty_pb';
import * as combined_pb from './combined_pb';


export class DummyServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorCreateOne = new grpcWeb.MethodDescriptor(
    '/main.DummyService/CreateOne',
    grpcWeb.MethodType.UNARY,
    combined_pb.DummyCreateOneInput,
    combined_pb.Dummy,
    (request: combined_pb.DummyCreateOneInput) => {
      return request.serializeBinary();
    },
    combined_pb.Dummy.deserializeBinary
  );

  createOne(
    request: combined_pb.DummyCreateOneInput,
    metadata: grpcWeb.Metadata | null): Promise<combined_pb.Dummy>;

  createOne(
    request: combined_pb.DummyCreateOneInput,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: combined_pb.Dummy) => void): grpcWeb.ClientReadableStream<combined_pb.Dummy>;

  createOne(
    request: combined_pb.DummyCreateOneInput,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: combined_pb.Dummy) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/main.DummyService/CreateOne',
        request,
        metadata || {},
        this.methodDescriptorCreateOne,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/main.DummyService/CreateOne',
    request,
    metadata || {},
    this.methodDescriptorCreateOne);
  }

  methodDescriptorUpdateOne = new grpcWeb.MethodDescriptor(
    '/main.DummyService/UpdateOne',
    grpcWeb.MethodType.UNARY,
    combined_pb.DummyUpdateOneInput,
    combined_pb.Dummy,
    (request: combined_pb.DummyUpdateOneInput) => {
      return request.serializeBinary();
    },
    combined_pb.Dummy.deserializeBinary
  );

  updateOne(
    request: combined_pb.DummyUpdateOneInput,
    metadata: grpcWeb.Metadata | null): Promise<combined_pb.Dummy>;

  updateOne(
    request: combined_pb.DummyUpdateOneInput,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: combined_pb.Dummy) => void): grpcWeb.ClientReadableStream<combined_pb.Dummy>;

  updateOne(
    request: combined_pb.DummyUpdateOneInput,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: combined_pb.Dummy) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/main.DummyService/UpdateOne',
        request,
        metadata || {},
        this.methodDescriptorUpdateOne,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/main.DummyService/UpdateOne',
    request,
    metadata || {},
    this.methodDescriptorUpdateOne);
  }

  methodDescriptorFindOne = new grpcWeb.MethodDescriptor(
    '/main.DummyService/FindOne',
    grpcWeb.MethodType.UNARY,
    combined_pb.DummyFindOneInput,
    combined_pb.Dummy,
    (request: combined_pb.DummyFindOneInput) => {
      return request.serializeBinary();
    },
    combined_pb.Dummy.deserializeBinary
  );

  findOne(
    request: combined_pb.DummyFindOneInput,
    metadata: grpcWeb.Metadata | null): Promise<combined_pb.Dummy>;

  findOne(
    request: combined_pb.DummyFindOneInput,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: combined_pb.Dummy) => void): grpcWeb.ClientReadableStream<combined_pb.Dummy>;

  findOne(
    request: combined_pb.DummyFindOneInput,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: combined_pb.Dummy) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/main.DummyService/FindOne',
        request,
        metadata || {},
        this.methodDescriptorFindOne,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/main.DummyService/FindOne',
    request,
    metadata || {},
    this.methodDescriptorFindOne);
  }

  methodDescriptorRemoveOne = new grpcWeb.MethodDescriptor(
    '/main.DummyService/RemoveOne',
    grpcWeb.MethodType.UNARY,
    combined_pb.DummyRemoveOneInput,
    google_protobuf_empty_pb.Empty,
    (request: combined_pb.DummyRemoveOneInput) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  removeOne(
    request: combined_pb.DummyRemoveOneInput,
    metadata: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  removeOne(
    request: combined_pb.DummyRemoveOneInput,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  removeOne(
    request: combined_pb.DummyRemoveOneInput,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/main.DummyService/RemoveOne',
        request,
        metadata || {},
        this.methodDescriptorRemoveOne,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/main.DummyService/RemoveOne',
    request,
    metadata || {},
    this.methodDescriptorRemoveOne);
  }

  methodDescriptorSearch = new grpcWeb.MethodDescriptor(
    '/main.DummyService/Search',
    grpcWeb.MethodType.UNARY,
    combined_pb.DummySearchInput,
    combined_pb.DummySearchResult,
    (request: combined_pb.DummySearchInput) => {
      return request.serializeBinary();
    },
    combined_pb.DummySearchResult.deserializeBinary
  );

  search(
    request: combined_pb.DummySearchInput,
    metadata: grpcWeb.Metadata | null): Promise<combined_pb.DummySearchResult>;

  search(
    request: combined_pb.DummySearchInput,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: combined_pb.DummySearchResult) => void): grpcWeb.ClientReadableStream<combined_pb.DummySearchResult>;

  search(
    request: combined_pb.DummySearchInput,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: combined_pb.DummySearchResult) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/main.DummyService/Search',
        request,
        metadata || {},
        this.methodDescriptorSearch,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/main.DummyService/Search',
    request,
    metadata || {},
    this.methodDescriptorSearch);
  }

}

export class LoginServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorCreateOne = new grpcWeb.MethodDescriptor(
    '/main.LoginService/CreateOne',
    grpcWeb.MethodType.UNARY,
    combined_pb.LoginCreateOneInput,
    combined_pb.Login,
    (request: combined_pb.LoginCreateOneInput) => {
      return request.serializeBinary();
    },
    combined_pb.Login.deserializeBinary
  );

  createOne(
    request: combined_pb.LoginCreateOneInput,
    metadata: grpcWeb.Metadata | null): Promise<combined_pb.Login>;

  createOne(
    request: combined_pb.LoginCreateOneInput,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: combined_pb.Login) => void): grpcWeb.ClientReadableStream<combined_pb.Login>;

  createOne(
    request: combined_pb.LoginCreateOneInput,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: combined_pb.Login) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/main.LoginService/CreateOne',
        request,
        metadata || {},
        this.methodDescriptorCreateOne,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/main.LoginService/CreateOne',
    request,
    metadata || {},
    this.methodDescriptorCreateOne);
  }

  methodDescriptorFindOne = new grpcWeb.MethodDescriptor(
    '/main.LoginService/FindOne',
    grpcWeb.MethodType.UNARY,
    combined_pb.LoginFindOneInput,
    combined_pb.Login,
    (request: combined_pb.LoginFindOneInput) => {
      return request.serializeBinary();
    },
    combined_pb.Login.deserializeBinary
  );

  findOne(
    request: combined_pb.LoginFindOneInput,
    metadata: grpcWeb.Metadata | null): Promise<combined_pb.Login>;

  findOne(
    request: combined_pb.LoginFindOneInput,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: combined_pb.Login) => void): grpcWeb.ClientReadableStream<combined_pb.Login>;

  findOne(
    request: combined_pb.LoginFindOneInput,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: combined_pb.Login) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/main.LoginService/FindOne',
        request,
        metadata || {},
        this.methodDescriptorFindOne,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/main.LoginService/FindOne',
    request,
    metadata || {},
    this.methodDescriptorFindOne);
  }

  methodDescriptorFindWhere = new grpcWeb.MethodDescriptor(
    '/main.LoginService/FindWhere',
    grpcWeb.MethodType.UNARY,
    combined_pb.LoginFindWhereInput,
    combined_pb.Login,
    (request: combined_pb.LoginFindWhereInput) => {
      return request.serializeBinary();
    },
    combined_pb.Login.deserializeBinary
  );

  findWhere(
    request: combined_pb.LoginFindWhereInput,
    metadata: grpcWeb.Metadata | null): Promise<combined_pb.Login>;

  findWhere(
    request: combined_pb.LoginFindWhereInput,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: combined_pb.Login) => void): grpcWeb.ClientReadableStream<combined_pb.Login>;

  findWhere(
    request: combined_pb.LoginFindWhereInput,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: combined_pb.Login) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/main.LoginService/FindWhere',
        request,
        metadata || {},
        this.methodDescriptorFindWhere,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/main.LoginService/FindWhere',
    request,
    metadata || {},
    this.methodDescriptorFindWhere);
  }

  methodDescriptorFindByPlatformId = new grpcWeb.MethodDescriptor(
    '/main.LoginService/FindByPlatformId',
    grpcWeb.MethodType.UNARY,
    combined_pb.LoginFindByPlatformIdInput,
    combined_pb.Login,
    (request: combined_pb.LoginFindByPlatformIdInput) => {
      return request.serializeBinary();
    },
    combined_pb.Login.deserializeBinary
  );

  findByPlatformId(
    request: combined_pb.LoginFindByPlatformIdInput,
    metadata: grpcWeb.Metadata | null): Promise<combined_pb.Login>;

  findByPlatformId(
    request: combined_pb.LoginFindByPlatformIdInput,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: combined_pb.Login) => void): grpcWeb.ClientReadableStream<combined_pb.Login>;

  findByPlatformId(
    request: combined_pb.LoginFindByPlatformIdInput,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: combined_pb.Login) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/main.LoginService/FindByPlatformId',
        request,
        metadata || {},
        this.methodDescriptorFindByPlatformId,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/main.LoginService/FindByPlatformId',
    request,
    metadata || {},
    this.methodDescriptorFindByPlatformId);
  }

  methodDescriptorUpdateOne = new grpcWeb.MethodDescriptor(
    '/main.LoginService/UpdateOne',
    grpcWeb.MethodType.UNARY,
    combined_pb.LoginUpdateOneInput,
    combined_pb.Login,
    (request: combined_pb.LoginUpdateOneInput) => {
      return request.serializeBinary();
    },
    combined_pb.Login.deserializeBinary
  );

  updateOne(
    request: combined_pb.LoginUpdateOneInput,
    metadata: grpcWeb.Metadata | null): Promise<combined_pb.Login>;

  updateOne(
    request: combined_pb.LoginUpdateOneInput,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: combined_pb.Login) => void): grpcWeb.ClientReadableStream<combined_pb.Login>;

  updateOne(
    request: combined_pb.LoginUpdateOneInput,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: combined_pb.Login) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/main.LoginService/UpdateOne',
        request,
        metadata || {},
        this.methodDescriptorUpdateOne,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/main.LoginService/UpdateOne',
    request,
    metadata || {},
    this.methodDescriptorUpdateOne);
  }

  methodDescriptorRemoveOne = new grpcWeb.MethodDescriptor(
    '/main.LoginService/RemoveOne',
    grpcWeb.MethodType.UNARY,
    combined_pb.LoginRemoveOneInput,
    google_protobuf_empty_pb.Empty,
    (request: combined_pb.LoginRemoveOneInput) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  removeOne(
    request: combined_pb.LoginRemoveOneInput,
    metadata: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  removeOne(
    request: combined_pb.LoginRemoveOneInput,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  removeOne(
    request: combined_pb.LoginRemoveOneInput,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/main.LoginService/RemoveOne',
        request,
        metadata || {},
        this.methodDescriptorRemoveOne,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/main.LoginService/RemoveOne',
    request,
    metadata || {},
    this.methodDescriptorRemoveOne);
  }

}

export class UserServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorCreateOne = new grpcWeb.MethodDescriptor(
    '/main.UserService/CreateOne',
    grpcWeb.MethodType.UNARY,
    combined_pb.UserCreateOneInput,
    combined_pb.User,
    (request: combined_pb.UserCreateOneInput) => {
      return request.serializeBinary();
    },
    combined_pb.User.deserializeBinary
  );

  createOne(
    request: combined_pb.UserCreateOneInput,
    metadata: grpcWeb.Metadata | null): Promise<combined_pb.User>;

  createOne(
    request: combined_pb.UserCreateOneInput,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: combined_pb.User) => void): grpcWeb.ClientReadableStream<combined_pb.User>;

  createOne(
    request: combined_pb.UserCreateOneInput,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: combined_pb.User) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/main.UserService/CreateOne',
        request,
        metadata || {},
        this.methodDescriptorCreateOne,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/main.UserService/CreateOne',
    request,
    metadata || {},
    this.methodDescriptorCreateOne);
  }

  methodDescriptorUpdateOne = new grpcWeb.MethodDescriptor(
    '/main.UserService/UpdateOne',
    grpcWeb.MethodType.UNARY,
    combined_pb.UserUpdateOneInput,
    combined_pb.User,
    (request: combined_pb.UserUpdateOneInput) => {
      return request.serializeBinary();
    },
    combined_pb.User.deserializeBinary
  );

  updateOne(
    request: combined_pb.UserUpdateOneInput,
    metadata: grpcWeb.Metadata | null): Promise<combined_pb.User>;

  updateOne(
    request: combined_pb.UserUpdateOneInput,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: combined_pb.User) => void): grpcWeb.ClientReadableStream<combined_pb.User>;

  updateOne(
    request: combined_pb.UserUpdateOneInput,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: combined_pb.User) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/main.UserService/UpdateOne',
        request,
        metadata || {},
        this.methodDescriptorUpdateOne,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/main.UserService/UpdateOne',
    request,
    metadata || {},
    this.methodDescriptorUpdateOne);
  }

  methodDescriptorFindOne = new grpcWeb.MethodDescriptor(
    '/main.UserService/FindOne',
    grpcWeb.MethodType.UNARY,
    combined_pb.UserFindOneInput,
    combined_pb.User,
    (request: combined_pb.UserFindOneInput) => {
      return request.serializeBinary();
    },
    combined_pb.User.deserializeBinary
  );

  findOne(
    request: combined_pb.UserFindOneInput,
    metadata: grpcWeb.Metadata | null): Promise<combined_pb.User>;

  findOne(
    request: combined_pb.UserFindOneInput,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: combined_pb.User) => void): grpcWeb.ClientReadableStream<combined_pb.User>;

  findOne(
    request: combined_pb.UserFindOneInput,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: combined_pb.User) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/main.UserService/FindOne',
        request,
        metadata || {},
        this.methodDescriptorFindOne,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/main.UserService/FindOne',
    request,
    metadata || {},
    this.methodDescriptorFindOne);
  }

  methodDescriptorRemoveOne = new grpcWeb.MethodDescriptor(
    '/main.UserService/RemoveOne',
    grpcWeb.MethodType.UNARY,
    combined_pb.UserRemoveOneInput,
    google_protobuf_empty_pb.Empty,
    (request: combined_pb.UserRemoveOneInput) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  removeOne(
    request: combined_pb.UserRemoveOneInput,
    metadata: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  removeOne(
    request: combined_pb.UserRemoveOneInput,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  removeOne(
    request: combined_pb.UserRemoveOneInput,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/main.UserService/RemoveOne',
        request,
        metadata || {},
        this.methodDescriptorRemoveOne,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/main.UserService/RemoveOne',
    request,
    metadata || {},
    this.methodDescriptorRemoveOne);
  }

  methodDescriptorSearch = new grpcWeb.MethodDescriptor(
    '/main.UserService/Search',
    grpcWeb.MethodType.UNARY,
    combined_pb.UserSearchInput,
    combined_pb.UserSearchResult,
    (request: combined_pb.UserSearchInput) => {
      return request.serializeBinary();
    },
    combined_pb.UserSearchResult.deserializeBinary
  );

  search(
    request: combined_pb.UserSearchInput,
    metadata: grpcWeb.Metadata | null): Promise<combined_pb.UserSearchResult>;

  search(
    request: combined_pb.UserSearchInput,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: combined_pb.UserSearchResult) => void): grpcWeb.ClientReadableStream<combined_pb.UserSearchResult>;

  search(
    request: combined_pb.UserSearchInput,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: combined_pb.UserSearchResult) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/main.UserService/Search',
        request,
        metadata || {},
        this.methodDescriptorSearch,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/main.UserService/Search',
    request,
    metadata || {},
    this.methodDescriptorSearch);
  }

}

export class HealthServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorHealthCheck = new grpcWeb.MethodDescriptor(
    '/main.HealthService/HealthCheck',
    grpcWeb.MethodType.UNARY,
    google_protobuf_empty_pb.Empty,
    combined_pb.HealthChekcResult,
    (request: google_protobuf_empty_pb.Empty) => {
      return request.serializeBinary();
    },
    combined_pb.HealthChekcResult.deserializeBinary
  );

  healthCheck(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null): Promise<combined_pb.HealthChekcResult>;

  healthCheck(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: combined_pb.HealthChekcResult) => void): grpcWeb.ClientReadableStream<combined_pb.HealthChekcResult>;

  healthCheck(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: combined_pb.HealthChekcResult) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/main.HealthService/HealthCheck',
        request,
        metadata || {},
        this.methodDescriptorHealthCheck,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/main.HealthService/HealthCheck',
    request,
    metadata || {},
    this.methodDescriptorHealthCheck);
  }

}

export class ConversationServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorCreateOne = new grpcWeb.MethodDescriptor(
    '/main.ConversationService/CreateOne',
    grpcWeb.MethodType.UNARY,
    combined_pb.ConversationCreateOneInput,
    combined_pb.Conversation,
    (request: combined_pb.ConversationCreateOneInput) => {
      return request.serializeBinary();
    },
    combined_pb.Conversation.deserializeBinary
  );

  createOne(
    request: combined_pb.ConversationCreateOneInput,
    metadata: grpcWeb.Metadata | null): Promise<combined_pb.Conversation>;

  createOne(
    request: combined_pb.ConversationCreateOneInput,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: combined_pb.Conversation) => void): grpcWeb.ClientReadableStream<combined_pb.Conversation>;

  createOne(
    request: combined_pb.ConversationCreateOneInput,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: combined_pb.Conversation) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/main.ConversationService/CreateOne',
        request,
        metadata || {},
        this.methodDescriptorCreateOne,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/main.ConversationService/CreateOne',
    request,
    metadata || {},
    this.methodDescriptorCreateOne);
  }

  methodDescriptorUpdateOne = new grpcWeb.MethodDescriptor(
    '/main.ConversationService/UpdateOne',
    grpcWeb.MethodType.UNARY,
    combined_pb.ConversationUpdateOneInput,
    combined_pb.Conversation,
    (request: combined_pb.ConversationUpdateOneInput) => {
      return request.serializeBinary();
    },
    combined_pb.Conversation.deserializeBinary
  );

  updateOne(
    request: combined_pb.ConversationUpdateOneInput,
    metadata: grpcWeb.Metadata | null): Promise<combined_pb.Conversation>;

  updateOne(
    request: combined_pb.ConversationUpdateOneInput,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: combined_pb.Conversation) => void): grpcWeb.ClientReadableStream<combined_pb.Conversation>;

  updateOne(
    request: combined_pb.ConversationUpdateOneInput,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: combined_pb.Conversation) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/main.ConversationService/UpdateOne',
        request,
        metadata || {},
        this.methodDescriptorUpdateOne,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/main.ConversationService/UpdateOne',
    request,
    metadata || {},
    this.methodDescriptorUpdateOne);
  }

  methodDescriptorFindOne = new grpcWeb.MethodDescriptor(
    '/main.ConversationService/FindOne',
    grpcWeb.MethodType.UNARY,
    combined_pb.ConversationFindOneInput,
    combined_pb.Conversation,
    (request: combined_pb.ConversationFindOneInput) => {
      return request.serializeBinary();
    },
    combined_pb.Conversation.deserializeBinary
  );

  findOne(
    request: combined_pb.ConversationFindOneInput,
    metadata: grpcWeb.Metadata | null): Promise<combined_pb.Conversation>;

  findOne(
    request: combined_pb.ConversationFindOneInput,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: combined_pb.Conversation) => void): grpcWeb.ClientReadableStream<combined_pb.Conversation>;

  findOne(
    request: combined_pb.ConversationFindOneInput,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: combined_pb.Conversation) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/main.ConversationService/FindOne',
        request,
        metadata || {},
        this.methodDescriptorFindOne,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/main.ConversationService/FindOne',
    request,
    metadata || {},
    this.methodDescriptorFindOne);
  }

  methodDescriptorRemoveOne = new grpcWeb.MethodDescriptor(
    '/main.ConversationService/RemoveOne',
    grpcWeb.MethodType.UNARY,
    combined_pb.ConversationRemoveOneInput,
    combined_pb.Conversation,
    (request: combined_pb.ConversationRemoveOneInput) => {
      return request.serializeBinary();
    },
    combined_pb.Conversation.deserializeBinary
  );

  removeOne(
    request: combined_pb.ConversationRemoveOneInput,
    metadata: grpcWeb.Metadata | null): Promise<combined_pb.Conversation>;

  removeOne(
    request: combined_pb.ConversationRemoveOneInput,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: combined_pb.Conversation) => void): grpcWeb.ClientReadableStream<combined_pb.Conversation>;

  removeOne(
    request: combined_pb.ConversationRemoveOneInput,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: combined_pb.Conversation) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/main.ConversationService/RemoveOne',
        request,
        metadata || {},
        this.methodDescriptorRemoveOne,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/main.ConversationService/RemoveOne',
    request,
    metadata || {},
    this.methodDescriptorRemoveOne);
  }

  methodDescriptorFindByParticipant = new grpcWeb.MethodDescriptor(
    '/main.ConversationService/FindByParticipant',
    grpcWeb.MethodType.UNARY,
    combined_pb.ConversationFindByParticipantInput,
    combined_pb.ConversationFindByParticipantResult,
    (request: combined_pb.ConversationFindByParticipantInput) => {
      return request.serializeBinary();
    },
    combined_pb.ConversationFindByParticipantResult.deserializeBinary
  );

  findByParticipant(
    request: combined_pb.ConversationFindByParticipantInput,
    metadata: grpcWeb.Metadata | null): Promise<combined_pb.ConversationFindByParticipantResult>;

  findByParticipant(
    request: combined_pb.ConversationFindByParticipantInput,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: combined_pb.ConversationFindByParticipantResult) => void): grpcWeb.ClientReadableStream<combined_pb.ConversationFindByParticipantResult>;

  findByParticipant(
    request: combined_pb.ConversationFindByParticipantInput,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: combined_pb.ConversationFindByParticipantResult) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/main.ConversationService/FindByParticipant',
        request,
        metadata || {},
        this.methodDescriptorFindByParticipant,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/main.ConversationService/FindByParticipant',
    request,
    metadata || {},
    this.methodDescriptorFindByParticipant);
  }

  methodDescriptorFindByPermissionIntegrityWarning = new grpcWeb.MethodDescriptor(
    '/main.ConversationService/FindByPermissionIntegrityWarning',
    grpcWeb.MethodType.SERVER_STREAMING,
    google_protobuf_empty_pb.Empty,
    combined_pb.Conversation,
    (request: google_protobuf_empty_pb.Empty) => {
      return request.serializeBinary();
    },
    combined_pb.Conversation.deserializeBinary
  );

  findByPermissionIntegrityWarning(
    request: google_protobuf_empty_pb.Empty,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<combined_pb.Conversation> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/main.ConversationService/FindByPermissionIntegrityWarning',
      request,
      metadata || {},
      this.methodDescriptorFindByPermissionIntegrityWarning);
  }

  methodDescriptorFindTemps = new grpcWeb.MethodDescriptor(
    '/main.ConversationService/FindTemps',
    grpcWeb.MethodType.SERVER_STREAMING,
    combined_pb.ConversationFindTempsInput,
    combined_pb.Conversation,
    (request: combined_pb.ConversationFindTempsInput) => {
      return request.serializeBinary();
    },
    combined_pb.Conversation.deserializeBinary
  );

  findTemps(
    request: combined_pb.ConversationFindTempsInput,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<combined_pb.Conversation> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/main.ConversationService/FindTemps',
      request,
      metadata || {},
      this.methodDescriptorFindTemps);
  }

  methodDescriptorRemoveTemps = new grpcWeb.MethodDescriptor(
    '/main.ConversationService/RemoveTemps',
    grpcWeb.MethodType.UNARY,
    combined_pb.ConversationRemoveTempsInput,
    google_protobuf_empty_pb.Empty,
    (request: combined_pb.ConversationRemoveTempsInput) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  removeTemps(
    request: combined_pb.ConversationRemoveTempsInput,
    metadata: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  removeTemps(
    request: combined_pb.ConversationRemoveTempsInput,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  removeTemps(
    request: combined_pb.ConversationRemoveTempsInput,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/main.ConversationService/RemoveTemps',
        request,
        metadata || {},
        this.methodDescriptorRemoveTemps,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/main.ConversationService/RemoveTemps',
    request,
    metadata || {},
    this.methodDescriptorRemoveTemps);
  }

}

export class MessageServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorCreateOne = new grpcWeb.MethodDescriptor(
    '/main.MessageService/CreateOne',
    grpcWeb.MethodType.UNARY,
    combined_pb.MessageCreateOneInput,
    combined_pb.Message,
    (request: combined_pb.MessageCreateOneInput) => {
      return request.serializeBinary();
    },
    combined_pb.Message.deserializeBinary
  );

  createOne(
    request: combined_pb.MessageCreateOneInput,
    metadata: grpcWeb.Metadata | null): Promise<combined_pb.Message>;

  createOne(
    request: combined_pb.MessageCreateOneInput,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: combined_pb.Message) => void): grpcWeb.ClientReadableStream<combined_pb.Message>;

  createOne(
    request: combined_pb.MessageCreateOneInput,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: combined_pb.Message) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/main.MessageService/CreateOne',
        request,
        metadata || {},
        this.methodDescriptorCreateOne,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/main.MessageService/CreateOne',
    request,
    metadata || {},
    this.methodDescriptorCreateOne);
  }

  methodDescriptorUpdateOne = new grpcWeb.MethodDescriptor(
    '/main.MessageService/UpdateOne',
    grpcWeb.MethodType.UNARY,
    combined_pb.MessageUpdateOneInput,
    combined_pb.Message,
    (request: combined_pb.MessageUpdateOneInput) => {
      return request.serializeBinary();
    },
    combined_pb.Message.deserializeBinary
  );

  updateOne(
    request: combined_pb.MessageUpdateOneInput,
    metadata: grpcWeb.Metadata | null): Promise<combined_pb.Message>;

  updateOne(
    request: combined_pb.MessageUpdateOneInput,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: combined_pb.Message) => void): grpcWeb.ClientReadableStream<combined_pb.Message>;

  updateOne(
    request: combined_pb.MessageUpdateOneInput,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: combined_pb.Message) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/main.MessageService/UpdateOne',
        request,
        metadata || {},
        this.methodDescriptorUpdateOne,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/main.MessageService/UpdateOne',
    request,
    metadata || {},
    this.methodDescriptorUpdateOne);
  }

  methodDescriptorFindOne = new grpcWeb.MethodDescriptor(
    '/main.MessageService/FindOne',
    grpcWeb.MethodType.UNARY,
    combined_pb.MessageFindOneInput,
    combined_pb.Message,
    (request: combined_pb.MessageFindOneInput) => {
      return request.serializeBinary();
    },
    combined_pb.Message.deserializeBinary
  );

  findOne(
    request: combined_pb.MessageFindOneInput,
    metadata: grpcWeb.Metadata | null): Promise<combined_pb.Message>;

  findOne(
    request: combined_pb.MessageFindOneInput,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: combined_pb.Message) => void): grpcWeb.ClientReadableStream<combined_pb.Message>;

  findOne(
    request: combined_pb.MessageFindOneInput,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: combined_pb.Message) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/main.MessageService/FindOne',
        request,
        metadata || {},
        this.methodDescriptorFindOne,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/main.MessageService/FindOne',
    request,
    metadata || {},
    this.methodDescriptorFindOne);
  }

  methodDescriptorFindUnique = new grpcWeb.MethodDescriptor(
    '/main.MessageService/FindUnique',
    grpcWeb.MethodType.UNARY,
    combined_pb.MessageFindUniqueInput,
    combined_pb.Message,
    (request: combined_pb.MessageFindUniqueInput) => {
      return request.serializeBinary();
    },
    combined_pb.Message.deserializeBinary
  );

  findUnique(
    request: combined_pb.MessageFindUniqueInput,
    metadata: grpcWeb.Metadata | null): Promise<combined_pb.Message>;

  findUnique(
    request: combined_pb.MessageFindUniqueInput,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: combined_pb.Message) => void): grpcWeb.ClientReadableStream<combined_pb.Message>;

  findUnique(
    request: combined_pb.MessageFindUniqueInput,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: combined_pb.Message) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/main.MessageService/FindUnique',
        request,
        metadata || {},
        this.methodDescriptorFindUnique,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/main.MessageService/FindUnique',
    request,
    metadata || {},
    this.methodDescriptorFindUnique);
  }

  methodDescriptorRemoveOne = new grpcWeb.MethodDescriptor(
    '/main.MessageService/RemoveOne',
    grpcWeb.MethodType.UNARY,
    combined_pb.MessageRemoveOneInput,
    combined_pb.Message,
    (request: combined_pb.MessageRemoveOneInput) => {
      return request.serializeBinary();
    },
    combined_pb.Message.deserializeBinary
  );

  removeOne(
    request: combined_pb.MessageRemoveOneInput,
    metadata: grpcWeb.Metadata | null): Promise<combined_pb.Message>;

  removeOne(
    request: combined_pb.MessageRemoveOneInput,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: combined_pb.Message) => void): grpcWeb.ClientReadableStream<combined_pb.Message>;

  removeOne(
    request: combined_pb.MessageRemoveOneInput,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: combined_pb.Message) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/main.MessageService/RemoveOne',
        request,
        metadata || {},
        this.methodDescriptorRemoveOne,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/main.MessageService/RemoveOne',
    request,
    metadata || {},
    this.methodDescriptorRemoveOne);
  }

  methodDescriptorFindByConversation = new grpcWeb.MethodDescriptor(
    '/main.MessageService/FindByConversation',
    grpcWeb.MethodType.UNARY,
    combined_pb.MessageFindByConversationInput,
    combined_pb.MessageFindByConversationResult,
    (request: combined_pb.MessageFindByConversationInput) => {
      return request.serializeBinary();
    },
    combined_pb.MessageFindByConversationResult.deserializeBinary
  );

  findByConversation(
    request: combined_pb.MessageFindByConversationInput,
    metadata: grpcWeb.Metadata | null): Promise<combined_pb.MessageFindByConversationResult>;

  findByConversation(
    request: combined_pb.MessageFindByConversationInput,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: combined_pb.MessageFindByConversationResult) => void): grpcWeb.ClientReadableStream<combined_pb.MessageFindByConversationResult>;

  findByConversation(
    request: combined_pb.MessageFindByConversationInput,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: combined_pb.MessageFindByConversationResult) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/main.MessageService/FindByConversation',
        request,
        metadata || {},
        this.methodDescriptorFindByConversation,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/main.MessageService/FindByConversation',
    request,
    metadata || {},
    this.methodDescriptorFindByConversation);
  }

}

export class PermissionServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorCreateOne = new grpcWeb.MethodDescriptor(
    '/main.PermissionService/CreateOne',
    grpcWeb.MethodType.UNARY,
    combined_pb.PermissionCreateOneInput,
    combined_pb.Permission,
    (request: combined_pb.PermissionCreateOneInput) => {
      return request.serializeBinary();
    },
    combined_pb.Permission.deserializeBinary
  );

  createOne(
    request: combined_pb.PermissionCreateOneInput,
    metadata: grpcWeb.Metadata | null): Promise<combined_pb.Permission>;

  createOne(
    request: combined_pb.PermissionCreateOneInput,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: combined_pb.Permission) => void): grpcWeb.ClientReadableStream<combined_pb.Permission>;

  createOne(
    request: combined_pb.PermissionCreateOneInput,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: combined_pb.Permission) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/main.PermissionService/CreateOne',
        request,
        metadata || {},
        this.methodDescriptorCreateOne,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/main.PermissionService/CreateOne',
    request,
    metadata || {},
    this.methodDescriptorCreateOne);
  }

  methodDescriptorCreateMany = new grpcWeb.MethodDescriptor(
    '/main.PermissionService/CreateMany',
    grpcWeb.MethodType.UNARY,
    combined_pb.PermissionCreateManyInput,
    combined_pb.Permissions,
    (request: combined_pb.PermissionCreateManyInput) => {
      return request.serializeBinary();
    },
    combined_pb.Permissions.deserializeBinary
  );

  createMany(
    request: combined_pb.PermissionCreateManyInput,
    metadata: grpcWeb.Metadata | null): Promise<combined_pb.Permissions>;

  createMany(
    request: combined_pb.PermissionCreateManyInput,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: combined_pb.Permissions) => void): grpcWeb.ClientReadableStream<combined_pb.Permissions>;

  createMany(
    request: combined_pb.PermissionCreateManyInput,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: combined_pb.Permissions) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/main.PermissionService/CreateMany',
        request,
        metadata || {},
        this.methodDescriptorCreateMany,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/main.PermissionService/CreateMany',
    request,
    metadata || {},
    this.methodDescriptorCreateMany);
  }

  methodDescriptorFindOne = new grpcWeb.MethodDescriptor(
    '/main.PermissionService/FindOne',
    grpcWeb.MethodType.UNARY,
    combined_pb.PermissionFindOneInput,
    combined_pb.Permission,
    (request: combined_pb.PermissionFindOneInput) => {
      return request.serializeBinary();
    },
    combined_pb.Permission.deserializeBinary
  );

  findOne(
    request: combined_pb.PermissionFindOneInput,
    metadata: grpcWeb.Metadata | null): Promise<combined_pb.Permission>;

  findOne(
    request: combined_pb.PermissionFindOneInput,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: combined_pb.Permission) => void): grpcWeb.ClientReadableStream<combined_pb.Permission>;

  findOne(
    request: combined_pb.PermissionFindOneInput,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: combined_pb.Permission) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/main.PermissionService/FindOne',
        request,
        metadata || {},
        this.methodDescriptorFindOne,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/main.PermissionService/FindOne',
    request,
    metadata || {},
    this.methodDescriptorFindOne);
  }

  methodDescriptorFindWhere = new grpcWeb.MethodDescriptor(
    '/main.PermissionService/FindWhere',
    grpcWeb.MethodType.UNARY,
    combined_pb.PermissionFindWhereInput,
    combined_pb.Permission,
    (request: combined_pb.PermissionFindWhereInput) => {
      return request.serializeBinary();
    },
    combined_pb.Permission.deserializeBinary
  );

  findWhere(
    request: combined_pb.PermissionFindWhereInput,
    metadata: grpcWeb.Metadata | null): Promise<combined_pb.Permission>;

  findWhere(
    request: combined_pb.PermissionFindWhereInput,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: combined_pb.Permission) => void): grpcWeb.ClientReadableStream<combined_pb.Permission>;

  findWhere(
    request: combined_pb.PermissionFindWhereInput,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: combined_pb.Permission) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/main.PermissionService/FindWhere',
        request,
        metadata || {},
        this.methodDescriptorFindWhere,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/main.PermissionService/FindWhere',
    request,
    metadata || {},
    this.methodDescriptorFindWhere);
  }

  methodDescriptorFindWhereMany = new grpcWeb.MethodDescriptor(
    '/main.PermissionService/FindWhereMany',
    grpcWeb.MethodType.UNARY,
    combined_pb.PermissionFindWhereManyInput,
    combined_pb.Permissions,
    (request: combined_pb.PermissionFindWhereManyInput) => {
      return request.serializeBinary();
    },
    combined_pb.Permissions.deserializeBinary
  );

  findWhereMany(
    request: combined_pb.PermissionFindWhereManyInput,
    metadata: grpcWeb.Metadata | null): Promise<combined_pb.Permissions>;

  findWhereMany(
    request: combined_pb.PermissionFindWhereManyInput,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: combined_pb.Permissions) => void): grpcWeb.ClientReadableStream<combined_pb.Permissions>;

  findWhereMany(
    request: combined_pb.PermissionFindWhereManyInput,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: combined_pb.Permissions) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/main.PermissionService/FindWhereMany',
        request,
        metadata || {},
        this.methodDescriptorFindWhereMany,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/main.PermissionService/FindWhereMany',
    request,
    metadata || {},
    this.methodDescriptorFindWhereMany);
  }

  methodDescriptorFindWhereOrStar = new grpcWeb.MethodDescriptor(
    '/main.PermissionService/FindWhereOrStar',
    grpcWeb.MethodType.UNARY,
    combined_pb.PermissionFindWhereOrStarInput,
    combined_pb.Permission,
    (request: combined_pb.PermissionFindWhereOrStarInput) => {
      return request.serializeBinary();
    },
    combined_pb.Permission.deserializeBinary
  );

  findWhereOrStar(
    request: combined_pb.PermissionFindWhereOrStarInput,
    metadata: grpcWeb.Metadata | null): Promise<combined_pb.Permission>;

  findWhereOrStar(
    request: combined_pb.PermissionFindWhereOrStarInput,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: combined_pb.Permission) => void): grpcWeb.ClientReadableStream<combined_pb.Permission>;

  findWhereOrStar(
    request: combined_pb.PermissionFindWhereOrStarInput,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: combined_pb.Permission) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/main.PermissionService/FindWhereOrStar',
        request,
        metadata || {},
        this.methodDescriptorFindWhereOrStar,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/main.PermissionService/FindWhereOrStar',
    request,
    metadata || {},
    this.methodDescriptorFindWhereOrStar);
  }

  methodDescriptorFindByPermitted = new grpcWeb.MethodDescriptor(
    '/main.PermissionService/FindByPermitted',
    grpcWeb.MethodType.UNARY,
    combined_pb.PermissionFindByPermittedInput,
    combined_pb.PermissionFindByPermittedResult,
    (request: combined_pb.PermissionFindByPermittedInput) => {
      return request.serializeBinary();
    },
    combined_pb.PermissionFindByPermittedResult.deserializeBinary
  );

  findByPermitted(
    request: combined_pb.PermissionFindByPermittedInput,
    metadata: grpcWeb.Metadata | null): Promise<combined_pb.PermissionFindByPermittedResult>;

  findByPermitted(
    request: combined_pb.PermissionFindByPermittedInput,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: combined_pb.PermissionFindByPermittedResult) => void): grpcWeb.ClientReadableStream<combined_pb.PermissionFindByPermittedResult>;

  findByPermitted(
    request: combined_pb.PermissionFindByPermittedInput,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: combined_pb.PermissionFindByPermittedResult) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/main.PermissionService/FindByPermitted',
        request,
        metadata || {},
        this.methodDescriptorFindByPermitted,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/main.PermissionService/FindByPermitted',
    request,
    metadata || {},
    this.methodDescriptorFindByPermitted);
  }

  methodDescriptorFindByEntity = new grpcWeb.MethodDescriptor(
    '/main.PermissionService/FindByEntity',
    grpcWeb.MethodType.UNARY,
    combined_pb.PermissionFindByEntityInput,
    combined_pb.PermissionFindByEntityResult,
    (request: combined_pb.PermissionFindByEntityInput) => {
      return request.serializeBinary();
    },
    combined_pb.PermissionFindByEntityResult.deserializeBinary
  );

  findByEntity(
    request: combined_pb.PermissionFindByEntityInput,
    metadata: grpcWeb.Metadata | null): Promise<combined_pb.PermissionFindByEntityResult>;

  findByEntity(
    request: combined_pb.PermissionFindByEntityInput,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: combined_pb.PermissionFindByEntityResult) => void): grpcWeb.ClientReadableStream<combined_pb.PermissionFindByEntityResult>;

  findByEntity(
    request: combined_pb.PermissionFindByEntityInput,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: combined_pb.PermissionFindByEntityResult) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/main.PermissionService/FindByEntity',
        request,
        metadata || {},
        this.methodDescriptorFindByEntity,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/main.PermissionService/FindByEntity',
    request,
    metadata || {},
    this.methodDescriptorFindByEntity);
  }

  methodDescriptorFindAllActions = new grpcWeb.MethodDescriptor(
    '/main.PermissionService/FindAllActions',
    grpcWeb.MethodType.UNARY,
    combined_pb.PermissionFindAllActionsInput,
    combined_pb.PermissionFindAllActionsResult,
    (request: combined_pb.PermissionFindAllActionsInput) => {
      return request.serializeBinary();
    },
    combined_pb.PermissionFindAllActionsResult.deserializeBinary
  );

  findAllActions(
    request: combined_pb.PermissionFindAllActionsInput,
    metadata: grpcWeb.Metadata | null): Promise<combined_pb.PermissionFindAllActionsResult>;

  findAllActions(
    request: combined_pb.PermissionFindAllActionsInput,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: combined_pb.PermissionFindAllActionsResult) => void): grpcWeb.ClientReadableStream<combined_pb.PermissionFindAllActionsResult>;

  findAllActions(
    request: combined_pb.PermissionFindAllActionsInput,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: combined_pb.PermissionFindAllActionsResult) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/main.PermissionService/FindAllActions',
        request,
        metadata || {},
        this.methodDescriptorFindAllActions,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/main.PermissionService/FindAllActions',
    request,
    metadata || {},
    this.methodDescriptorFindAllActions);
  }

  methodDescriptorValidateOne = new grpcWeb.MethodDescriptor(
    '/main.PermissionService/ValidateOne',
    grpcWeb.MethodType.UNARY,
    combined_pb.PermissionValidateOneInput,
    combined_pb.PermissionValidateOneResult,
    (request: combined_pb.PermissionValidateOneInput) => {
      return request.serializeBinary();
    },
    combined_pb.PermissionValidateOneResult.deserializeBinary
  );

  validateOne(
    request: combined_pb.PermissionValidateOneInput,
    metadata: grpcWeb.Metadata | null): Promise<combined_pb.PermissionValidateOneResult>;

  validateOne(
    request: combined_pb.PermissionValidateOneInput,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: combined_pb.PermissionValidateOneResult) => void): grpcWeb.ClientReadableStream<combined_pb.PermissionValidateOneResult>;

  validateOne(
    request: combined_pb.PermissionValidateOneInput,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: combined_pb.PermissionValidateOneResult) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/main.PermissionService/ValidateOne',
        request,
        metadata || {},
        this.methodDescriptorValidateOne,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/main.PermissionService/ValidateOne',
    request,
    metadata || {},
    this.methodDescriptorValidateOne);
  }

  methodDescriptorRemoveOne = new grpcWeb.MethodDescriptor(
    '/main.PermissionService/RemoveOne',
    grpcWeb.MethodType.UNARY,
    combined_pb.PermissionRemoveOneInput,
    google_protobuf_empty_pb.Empty,
    (request: combined_pb.PermissionRemoveOneInput) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  removeOne(
    request: combined_pb.PermissionRemoveOneInput,
    metadata: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  removeOne(
    request: combined_pb.PermissionRemoveOneInput,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  removeOne(
    request: combined_pb.PermissionRemoveOneInput,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/main.PermissionService/RemoveOne',
        request,
        metadata || {},
        this.methodDescriptorRemoveOne,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/main.PermissionService/RemoveOne',
    request,
    metadata || {},
    this.methodDescriptorRemoveOne);
  }

  methodDescriptorRemoveWhere = new grpcWeb.MethodDescriptor(
    '/main.PermissionService/RemoveWhere',
    grpcWeb.MethodType.UNARY,
    combined_pb.PermissionRemoveWhereInput,
    google_protobuf_empty_pb.Empty,
    (request: combined_pb.PermissionRemoveWhereInput) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  removeWhere(
    request: combined_pb.PermissionRemoveWhereInput,
    metadata: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  removeWhere(
    request: combined_pb.PermissionRemoveWhereInput,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  removeWhere(
    request: combined_pb.PermissionRemoveWhereInput,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/main.PermissionService/RemoveWhere',
        request,
        metadata || {},
        this.methodDescriptorRemoveWhere,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/main.PermissionService/RemoveWhere',
    request,
    metadata || {},
    this.methodDescriptorRemoveWhere);
  }

  methodDescriptorRemoveWhereMany = new grpcWeb.MethodDescriptor(
    '/main.PermissionService/RemoveWhereMany',
    grpcWeb.MethodType.UNARY,
    combined_pb.PermissionRemoveWhereManyInput,
    google_protobuf_empty_pb.Empty,
    (request: combined_pb.PermissionRemoveWhereManyInput) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  removeWhereMany(
    request: combined_pb.PermissionRemoveWhereManyInput,
    metadata: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  removeWhereMany(
    request: combined_pb.PermissionRemoveWhereManyInput,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  removeWhereMany(
    request: combined_pb.PermissionRemoveWhereManyInput,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/main.PermissionService/RemoveWhereMany',
        request,
        metadata || {},
        this.methodDescriptorRemoveWhereMany,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/main.PermissionService/RemoveWhereMany',
    request,
    metadata || {},
    this.methodDescriptorRemoveWhereMany);
  }

  methodDescriptorRemoveAllActions = new grpcWeb.MethodDescriptor(
    '/main.PermissionService/RemoveAllActions',
    grpcWeb.MethodType.UNARY,
    combined_pb.PermissionRemoveAllActionsInput,
    google_protobuf_empty_pb.Empty,
    (request: combined_pb.PermissionRemoveAllActionsInput) => {
      return request.serializeBinary();
    },
    google_protobuf_empty_pb.Empty.deserializeBinary
  );

  removeAllActions(
    request: combined_pb.PermissionRemoveAllActionsInput,
    metadata: grpcWeb.Metadata | null): Promise<google_protobuf_empty_pb.Empty>;

  removeAllActions(
    request: combined_pb.PermissionRemoveAllActionsInput,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void): grpcWeb.ClientReadableStream<google_protobuf_empty_pb.Empty>;

  removeAllActions(
    request: combined_pb.PermissionRemoveAllActionsInput,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: google_protobuf_empty_pb.Empty) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/main.PermissionService/RemoveAllActions',
        request,
        metadata || {},
        this.methodDescriptorRemoveAllActions,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/main.PermissionService/RemoveAllActions',
    request,
    metadata || {},
    this.methodDescriptorRemoveAllActions);
  }

}

export class UserFollowServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorCreateOne = new grpcWeb.MethodDescriptor(
    '/main.UserFollowService/CreateOne',
    grpcWeb.MethodType.UNARY,
    combined_pb.UserFollowCreateOneInput,
    combined_pb.Follower,
    (request: combined_pb.UserFollowCreateOneInput) => {
      return request.serializeBinary();
    },
    combined_pb.Follower.deserializeBinary
  );

  createOne(
    request: combined_pb.UserFollowCreateOneInput,
    metadata: grpcWeb.Metadata | null): Promise<combined_pb.Follower>;

  createOne(
    request: combined_pb.UserFollowCreateOneInput,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: combined_pb.Follower) => void): grpcWeb.ClientReadableStream<combined_pb.Follower>;

  createOne(
    request: combined_pb.UserFollowCreateOneInput,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: combined_pb.Follower) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/main.UserFollowService/CreateOne',
        request,
        metadata || {},
        this.methodDescriptorCreateOne,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/main.UserFollowService/CreateOne',
    request,
    metadata || {},
    this.methodDescriptorCreateOne);
  }

  methodDescriptorRemoveOne = new grpcWeb.MethodDescriptor(
    '/main.UserFollowService/RemoveOne',
    grpcWeb.MethodType.UNARY,
    combined_pb.UserFollowRemoveOneInput,
    combined_pb.Follower,
    (request: combined_pb.UserFollowRemoveOneInput) => {
      return request.serializeBinary();
    },
    combined_pb.Follower.deserializeBinary
  );

  removeOne(
    request: combined_pb.UserFollowRemoveOneInput,
    metadata: grpcWeb.Metadata | null): Promise<combined_pb.Follower>;

  removeOne(
    request: combined_pb.UserFollowRemoveOneInput,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: combined_pb.Follower) => void): grpcWeb.ClientReadableStream<combined_pb.Follower>;

  removeOne(
    request: combined_pb.UserFollowRemoveOneInput,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: combined_pb.Follower) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/main.UserFollowService/RemoveOne',
        request,
        metadata || {},
        this.methodDescriptorRemoveOne,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/main.UserFollowService/RemoveOne',
    request,
    metadata || {},
    this.methodDescriptorRemoveOne);
  }

  methodDescriptorFindFollowers = new grpcWeb.MethodDescriptor(
    '/main.UserFollowService/FindFollowers',
    grpcWeb.MethodType.UNARY,
    combined_pb.UserFindFollowersInput,
    combined_pb.UserFindFollowersResult,
    (request: combined_pb.UserFindFollowersInput) => {
      return request.serializeBinary();
    },
    combined_pb.UserFindFollowersResult.deserializeBinary
  );

  findFollowers(
    request: combined_pb.UserFindFollowersInput,
    metadata: grpcWeb.Metadata | null): Promise<combined_pb.UserFindFollowersResult>;

  findFollowers(
    request: combined_pb.UserFindFollowersInput,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: combined_pb.UserFindFollowersResult) => void): grpcWeb.ClientReadableStream<combined_pb.UserFindFollowersResult>;

  findFollowers(
    request: combined_pb.UserFindFollowersInput,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: combined_pb.UserFindFollowersResult) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/main.UserFollowService/FindFollowers',
        request,
        metadata || {},
        this.methodDescriptorFindFollowers,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/main.UserFollowService/FindFollowers',
    request,
    metadata || {},
    this.methodDescriptorFindFollowers);
  }

  methodDescriptorFindFollowees = new grpcWeb.MethodDescriptor(
    '/main.UserFollowService/FindFollowees',
    grpcWeb.MethodType.UNARY,
    combined_pb.UserFindFolloweesInput,
    combined_pb.UserFindFolloweesResult,
    (request: combined_pb.UserFindFolloweesInput) => {
      return request.serializeBinary();
    },
    combined_pb.UserFindFolloweesResult.deserializeBinary
  );

  findFollowees(
    request: combined_pb.UserFindFolloweesInput,
    metadata: grpcWeb.Metadata | null): Promise<combined_pb.UserFindFolloweesResult>;

  findFollowees(
    request: combined_pb.UserFindFolloweesInput,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: combined_pb.UserFindFolloweesResult) => void): grpcWeb.ClientReadableStream<combined_pb.UserFindFolloweesResult>;

  findFollowees(
    request: combined_pb.UserFindFolloweesInput,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: combined_pb.UserFindFolloweesResult) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/main.UserFollowService/FindFollowees',
        request,
        metadata || {},
        this.methodDescriptorFindFollowees,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/main.UserFollowService/FindFollowees',
    request,
    metadata || {},
    this.methodDescriptorFindFollowees);
  }

}

export class WorkersServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorPublishJob = new grpcWeb.MethodDescriptor(
    '/main.WorkersService/PublishJob',
    grpcWeb.MethodType.UNARY,
    combined_pb.PublishJobInput,
    combined_pb.PublishJobResult,
    (request: combined_pb.PublishJobInput) => {
      return request.serializeBinary();
    },
    combined_pb.PublishJobResult.deserializeBinary
  );

  publishJob(
    request: combined_pb.PublishJobInput,
    metadata: grpcWeb.Metadata | null): Promise<combined_pb.PublishJobResult>;

  publishJob(
    request: combined_pb.PublishJobInput,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: combined_pb.PublishJobResult) => void): grpcWeb.ClientReadableStream<combined_pb.PublishJobResult>;

  publishJob(
    request: combined_pb.PublishJobInput,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: combined_pb.PublishJobResult) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/main.WorkersService/PublishJob',
        request,
        metadata || {},
        this.methodDescriptorPublishJob,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/main.WorkersService/PublishJob',
    request,
    metadata || {},
    this.methodDescriptorPublishJob);
  }

  methodDescriptorHealthCheck = new grpcWeb.MethodDescriptor(
    '/main.WorkersService/HealthCheck',
    grpcWeb.MethodType.UNARY,
    google_protobuf_empty_pb.Empty,
    combined_pb.WorkersHealthCheckResult,
    (request: google_protobuf_empty_pb.Empty) => {
      return request.serializeBinary();
    },
    combined_pb.WorkersHealthCheckResult.deserializeBinary
  );

  healthCheck(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null): Promise<combined_pb.WorkersHealthCheckResult>;

  healthCheck(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: combined_pb.WorkersHealthCheckResult) => void): grpcWeb.ClientReadableStream<combined_pb.WorkersHealthCheckResult>;

  healthCheck(
    request: google_protobuf_empty_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: combined_pb.WorkersHealthCheckResult) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/main.WorkersService/HealthCheck',
        request,
        metadata || {},
        this.methodDescriptorHealthCheck,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/main.WorkersService/HealthCheck',
    request,
    metadata || {},
    this.methodDescriptorHealthCheck);
  }

}

